/**
 * Autogenerated by Thrift Compiler (0.16.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package hust.software.elon.safety.model.domain;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.16.0)", date = "2022-04-23")
public class RepeatSegment implements org.apache.thrift.TBase<RepeatSegment, RepeatSegment._Fields>, java.io.Serializable, Cloneable, Comparable<RepeatSegment> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RepeatSegment");

  private static final org.apache.thrift.protocol.TField ORIGIN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("originId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField ORIGIN_START_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("originStartTime", org.apache.thrift.protocol.TType.DOUBLE, (short)2);
  private static final org.apache.thrift.protocol.TField ORIGIN_END_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("originEndTime", org.apache.thrift.protocol.TType.DOUBLE, (short)3);
  private static final org.apache.thrift.protocol.TField TARGET_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("targetId", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField TARGET_START_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("targetStartTime", org.apache.thrift.protocol.TType.DOUBLE, (short)5);
  private static final org.apache.thrift.protocol.TField TARGET_END_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("targetEndTime", org.apache.thrift.protocol.TType.DOUBLE, (short)6);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new RepeatSegmentStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new RepeatSegmentTupleSchemeFactory();

  public long originId; // required
  public double originStartTime; // required
  public double originEndTime; // required
  public long targetId; // required
  public double targetStartTime; // required
  public double targetEndTime; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ORIGIN_ID((short)1, "originId"),
    ORIGIN_START_TIME((short)2, "originStartTime"),
    ORIGIN_END_TIME((short)3, "originEndTime"),
    TARGET_ID((short)4, "targetId"),
    TARGET_START_TIME((short)5, "targetStartTime"),
    TARGET_END_TIME((short)6, "targetEndTime");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ORIGIN_ID
          return ORIGIN_ID;
        case 2: // ORIGIN_START_TIME
          return ORIGIN_START_TIME;
        case 3: // ORIGIN_END_TIME
          return ORIGIN_END_TIME;
        case 4: // TARGET_ID
          return TARGET_ID;
        case 5: // TARGET_START_TIME
          return TARGET_START_TIME;
        case 6: // TARGET_END_TIME
          return TARGET_END_TIME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ORIGINID_ISSET_ID = 0;
  private static final int __ORIGINSTARTTIME_ISSET_ID = 1;
  private static final int __ORIGINENDTIME_ISSET_ID = 2;
  private static final int __TARGETID_ISSET_ID = 3;
  private static final int __TARGETSTARTTIME_ISSET_ID = 4;
  private static final int __TARGETENDTIME_ISSET_ID = 5;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ORIGIN_ID, new org.apache.thrift.meta_data.FieldMetaData("originId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ORIGIN_START_TIME, new org.apache.thrift.meta_data.FieldMetaData("originStartTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.ORIGIN_END_TIME, new org.apache.thrift.meta_data.FieldMetaData("originEndTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.TARGET_ID, new org.apache.thrift.meta_data.FieldMetaData("targetId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TARGET_START_TIME, new org.apache.thrift.meta_data.FieldMetaData("targetStartTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.TARGET_END_TIME, new org.apache.thrift.meta_data.FieldMetaData("targetEndTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RepeatSegment.class, metaDataMap);
  }

  public RepeatSegment() {
  }

  public RepeatSegment(
    long originId,
    double originStartTime,
    double originEndTime,
    long targetId,
    double targetStartTime,
    double targetEndTime)
  {
    this();
    this.originId = originId;
    setOriginIdIsSet(true);
    this.originStartTime = originStartTime;
    setOriginStartTimeIsSet(true);
    this.originEndTime = originEndTime;
    setOriginEndTimeIsSet(true);
    this.targetId = targetId;
    setTargetIdIsSet(true);
    this.targetStartTime = targetStartTime;
    setTargetStartTimeIsSet(true);
    this.targetEndTime = targetEndTime;
    setTargetEndTimeIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public RepeatSegment(RepeatSegment other) {
    __isset_bitfield = other.__isset_bitfield;
    this.originId = other.originId;
    this.originStartTime = other.originStartTime;
    this.originEndTime = other.originEndTime;
    this.targetId = other.targetId;
    this.targetStartTime = other.targetStartTime;
    this.targetEndTime = other.targetEndTime;
  }

  public RepeatSegment deepCopy() {
    return new RepeatSegment(this);
  }

  @Override
  public void clear() {
    setOriginIdIsSet(false);
    this.originId = 0;
    setOriginStartTimeIsSet(false);
    this.originStartTime = 0.0;
    setOriginEndTimeIsSet(false);
    this.originEndTime = 0.0;
    setTargetIdIsSet(false);
    this.targetId = 0;
    setTargetStartTimeIsSet(false);
    this.targetStartTime = 0.0;
    setTargetEndTimeIsSet(false);
    this.targetEndTime = 0.0;
  }

  public long getOriginId() {
    return this.originId;
  }

  public RepeatSegment setOriginId(long originId) {
    this.originId = originId;
    setOriginIdIsSet(true);
    return this;
  }

  public void unsetOriginId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ORIGINID_ISSET_ID);
  }

  /** Returns true if field originId is set (has been assigned a value) and false otherwise */
  public boolean isSetOriginId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ORIGINID_ISSET_ID);
  }

  public void setOriginIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ORIGINID_ISSET_ID, value);
  }

  public double getOriginStartTime() {
    return this.originStartTime;
  }

  public RepeatSegment setOriginStartTime(double originStartTime) {
    this.originStartTime = originStartTime;
    setOriginStartTimeIsSet(true);
    return this;
  }

  public void unsetOriginStartTime() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ORIGINSTARTTIME_ISSET_ID);
  }

  /** Returns true if field originStartTime is set (has been assigned a value) and false otherwise */
  public boolean isSetOriginStartTime() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ORIGINSTARTTIME_ISSET_ID);
  }

  public void setOriginStartTimeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ORIGINSTARTTIME_ISSET_ID, value);
  }

  public double getOriginEndTime() {
    return this.originEndTime;
  }

  public RepeatSegment setOriginEndTime(double originEndTime) {
    this.originEndTime = originEndTime;
    setOriginEndTimeIsSet(true);
    return this;
  }

  public void unsetOriginEndTime() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ORIGINENDTIME_ISSET_ID);
  }

  /** Returns true if field originEndTime is set (has been assigned a value) and false otherwise */
  public boolean isSetOriginEndTime() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ORIGINENDTIME_ISSET_ID);
  }

  public void setOriginEndTimeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ORIGINENDTIME_ISSET_ID, value);
  }

  public long getTargetId() {
    return this.targetId;
  }

  public RepeatSegment setTargetId(long targetId) {
    this.targetId = targetId;
    setTargetIdIsSet(true);
    return this;
  }

  public void unsetTargetId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TARGETID_ISSET_ID);
  }

  /** Returns true if field targetId is set (has been assigned a value) and false otherwise */
  public boolean isSetTargetId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TARGETID_ISSET_ID);
  }

  public void setTargetIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TARGETID_ISSET_ID, value);
  }

  public double getTargetStartTime() {
    return this.targetStartTime;
  }

  public RepeatSegment setTargetStartTime(double targetStartTime) {
    this.targetStartTime = targetStartTime;
    setTargetStartTimeIsSet(true);
    return this;
  }

  public void unsetTargetStartTime() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TARGETSTARTTIME_ISSET_ID);
  }

  /** Returns true if field targetStartTime is set (has been assigned a value) and false otherwise */
  public boolean isSetTargetStartTime() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TARGETSTARTTIME_ISSET_ID);
  }

  public void setTargetStartTimeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TARGETSTARTTIME_ISSET_ID, value);
  }

  public double getTargetEndTime() {
    return this.targetEndTime;
  }

  public RepeatSegment setTargetEndTime(double targetEndTime) {
    this.targetEndTime = targetEndTime;
    setTargetEndTimeIsSet(true);
    return this;
  }

  public void unsetTargetEndTime() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TARGETENDTIME_ISSET_ID);
  }

  /** Returns true if field targetEndTime is set (has been assigned a value) and false otherwise */
  public boolean isSetTargetEndTime() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TARGETENDTIME_ISSET_ID);
  }

  public void setTargetEndTimeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TARGETENDTIME_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case ORIGIN_ID:
      if (value == null) {
        unsetOriginId();
      } else {
        setOriginId((java.lang.Long)value);
      }
      break;

    case ORIGIN_START_TIME:
      if (value == null) {
        unsetOriginStartTime();
      } else {
        setOriginStartTime((java.lang.Double)value);
      }
      break;

    case ORIGIN_END_TIME:
      if (value == null) {
        unsetOriginEndTime();
      } else {
        setOriginEndTime((java.lang.Double)value);
      }
      break;

    case TARGET_ID:
      if (value == null) {
        unsetTargetId();
      } else {
        setTargetId((java.lang.Long)value);
      }
      break;

    case TARGET_START_TIME:
      if (value == null) {
        unsetTargetStartTime();
      } else {
        setTargetStartTime((java.lang.Double)value);
      }
      break;

    case TARGET_END_TIME:
      if (value == null) {
        unsetTargetEndTime();
      } else {
        setTargetEndTime((java.lang.Double)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case ORIGIN_ID:
      return getOriginId();

    case ORIGIN_START_TIME:
      return getOriginStartTime();

    case ORIGIN_END_TIME:
      return getOriginEndTime();

    case TARGET_ID:
      return getTargetId();

    case TARGET_START_TIME:
      return getTargetStartTime();

    case TARGET_END_TIME:
      return getTargetEndTime();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case ORIGIN_ID:
      return isSetOriginId();
    case ORIGIN_START_TIME:
      return isSetOriginStartTime();
    case ORIGIN_END_TIME:
      return isSetOriginEndTime();
    case TARGET_ID:
      return isSetTargetId();
    case TARGET_START_TIME:
      return isSetTargetStartTime();
    case TARGET_END_TIME:
      return isSetTargetEndTime();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof RepeatSegment)
      return this.equals((RepeatSegment)that);
    return false;
  }

  public boolean equals(RepeatSegment that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_originId = true;
    boolean that_present_originId = true;
    if (this_present_originId || that_present_originId) {
      if (!(this_present_originId && that_present_originId))
        return false;
      if (this.originId != that.originId)
        return false;
    }

    boolean this_present_originStartTime = true;
    boolean that_present_originStartTime = true;
    if (this_present_originStartTime || that_present_originStartTime) {
      if (!(this_present_originStartTime && that_present_originStartTime))
        return false;
      if (this.originStartTime != that.originStartTime)
        return false;
    }

    boolean this_present_originEndTime = true;
    boolean that_present_originEndTime = true;
    if (this_present_originEndTime || that_present_originEndTime) {
      if (!(this_present_originEndTime && that_present_originEndTime))
        return false;
      if (this.originEndTime != that.originEndTime)
        return false;
    }

    boolean this_present_targetId = true;
    boolean that_present_targetId = true;
    if (this_present_targetId || that_present_targetId) {
      if (!(this_present_targetId && that_present_targetId))
        return false;
      if (this.targetId != that.targetId)
        return false;
    }

    boolean this_present_targetStartTime = true;
    boolean that_present_targetStartTime = true;
    if (this_present_targetStartTime || that_present_targetStartTime) {
      if (!(this_present_targetStartTime && that_present_targetStartTime))
        return false;
      if (this.targetStartTime != that.targetStartTime)
        return false;
    }

    boolean this_present_targetEndTime = true;
    boolean that_present_targetEndTime = true;
    if (this_present_targetEndTime || that_present_targetEndTime) {
      if (!(this_present_targetEndTime && that_present_targetEndTime))
        return false;
      if (this.targetEndTime != that.targetEndTime)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(originId);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(originStartTime);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(originEndTime);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(targetId);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(targetStartTime);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(targetEndTime);

    return hashCode;
  }

  @Override
  public int compareTo(RepeatSegment other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetOriginId(), other.isSetOriginId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOriginId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.originId, other.originId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetOriginStartTime(), other.isSetOriginStartTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOriginStartTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.originStartTime, other.originStartTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetOriginEndTime(), other.isSetOriginEndTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOriginEndTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.originEndTime, other.originEndTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTargetId(), other.isSetTargetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTargetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.targetId, other.targetId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTargetStartTime(), other.isSetTargetStartTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTargetStartTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.targetStartTime, other.targetStartTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTargetEndTime(), other.isSetTargetEndTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTargetEndTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.targetEndTime, other.targetEndTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("RepeatSegment(");
    boolean first = true;

    sb.append("originId:");
    sb.append(this.originId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("originStartTime:");
    sb.append(this.originStartTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("originEndTime:");
    sb.append(this.originEndTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("targetId:");
    sb.append(this.targetId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("targetStartTime:");
    sb.append(this.targetStartTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("targetEndTime:");
    sb.append(this.targetEndTime);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class RepeatSegmentStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public RepeatSegmentStandardScheme getScheme() {
      return new RepeatSegmentStandardScheme();
    }
  }

  private static class RepeatSegmentStandardScheme extends org.apache.thrift.scheme.StandardScheme<RepeatSegment> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, RepeatSegment struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ORIGIN_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.originId = iprot.readI64();
              struct.setOriginIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ORIGIN_START_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.originStartTime = iprot.readDouble();
              struct.setOriginStartTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ORIGIN_END_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.originEndTime = iprot.readDouble();
              struct.setOriginEndTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TARGET_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.targetId = iprot.readI64();
              struct.setTargetIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // TARGET_START_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.targetStartTime = iprot.readDouble();
              struct.setTargetStartTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // TARGET_END_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.targetEndTime = iprot.readDouble();
              struct.setTargetEndTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, RepeatSegment struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ORIGIN_ID_FIELD_DESC);
      oprot.writeI64(struct.originId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ORIGIN_START_TIME_FIELD_DESC);
      oprot.writeDouble(struct.originStartTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ORIGIN_END_TIME_FIELD_DESC);
      oprot.writeDouble(struct.originEndTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TARGET_ID_FIELD_DESC);
      oprot.writeI64(struct.targetId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TARGET_START_TIME_FIELD_DESC);
      oprot.writeDouble(struct.targetStartTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TARGET_END_TIME_FIELD_DESC);
      oprot.writeDouble(struct.targetEndTime);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class RepeatSegmentTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public RepeatSegmentTupleScheme getScheme() {
      return new RepeatSegmentTupleScheme();
    }
  }

  private static class RepeatSegmentTupleScheme extends org.apache.thrift.scheme.TupleScheme<RepeatSegment> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, RepeatSegment struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetOriginId()) {
        optionals.set(0);
      }
      if (struct.isSetOriginStartTime()) {
        optionals.set(1);
      }
      if (struct.isSetOriginEndTime()) {
        optionals.set(2);
      }
      if (struct.isSetTargetId()) {
        optionals.set(3);
      }
      if (struct.isSetTargetStartTime()) {
        optionals.set(4);
      }
      if (struct.isSetTargetEndTime()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetOriginId()) {
        oprot.writeI64(struct.originId);
      }
      if (struct.isSetOriginStartTime()) {
        oprot.writeDouble(struct.originStartTime);
      }
      if (struct.isSetOriginEndTime()) {
        oprot.writeDouble(struct.originEndTime);
      }
      if (struct.isSetTargetId()) {
        oprot.writeI64(struct.targetId);
      }
      if (struct.isSetTargetStartTime()) {
        oprot.writeDouble(struct.targetStartTime);
      }
      if (struct.isSetTargetEndTime()) {
        oprot.writeDouble(struct.targetEndTime);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, RepeatSegment struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.originId = iprot.readI64();
        struct.setOriginIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.originStartTime = iprot.readDouble();
        struct.setOriginStartTimeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.originEndTime = iprot.readDouble();
        struct.setOriginEndTimeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.targetId = iprot.readI64();
        struct.setTargetIdIsSet(true);
      }
      if (incoming.get(4)) {
        struct.targetStartTime = iprot.readDouble();
        struct.setTargetStartTimeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.targetEndTime = iprot.readDouble();
        struct.setTargetEndTimeIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

